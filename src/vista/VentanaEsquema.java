/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import com.mxgraph.model.mxCell;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.util.mxConstants;
import com.mxgraph.view.mxStylesheet;
import controlador.Grafo;
import controlador.MouseEventListener;
import java.util.HashMap;

/**
 *
 * @author Camilo Sampedro
 */
public class VentanaEsquema extends javax.swing.JFrame {

    /**
     * Objeto con la información del grafo.
     */
    protected Grafo grafo;

    /**
     * Componente gráfico del grafo. Aquí se hacen las actualizaciones gráficas
     * y se puede obtener información gráfica del grafo y de los nodos.
     */
    private mxGraphComponent graphComponent;

    /**
     * Última celda (Vértice o lado) a la que se le hizo clic. Usado para
     * verificar qué celda eliminar, sabiendo que fue la última a la que se le
     * hizo clic. Si no hay ninguna celda seleccionada, este valor será nulo y
     * ninguna será eliminada.
     */
    private mxCell cell;

    /**
     * Crea una nueva ventana de grafo vacío.
     */
    public VentanaEsquema() {
        grafo = new Grafo();
        initComponents();
        inicializarEstilo();
        graphComponent.getGraphControl().addMouseListener(new MouseEventListener(grafo));
    }

    /**
     * Ventana con un grafo resultado.
     *
     * @param grafo Grafo a imprimir.
     */
    public VentanaEsquema(Grafo grafo) {
        this.grafo = grafo;
        initComponents();
        inicializarEstilo();
        graphComponent.getGraphControl().addMouseListener(new MouseEventListener(grafo));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelGrafo = new javax.swing.JPanel();
        btnAgregarDimension = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jlNombre = new javax.swing.JLabel();
        tfIngresadorNombre = new javax.swing.JTextField();
        btnAgregarHecho = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuGrafo = new javax.swing.JMenu();
        btnMenuMakeOnto = new javax.swing.JMenuItem();
        btnMenuMakeCovering = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        menuEdicion = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Grafize - Ingresar esquema");

        panelGrafo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelGrafo.setLayout(new java.awt.GridLayout(1, 0));
        graphComponent = new mxGraphComponent(grafo);
        //graphComponent.setPreferredSize(new Dimension(500,500));
        //panelGrafo.setLayout(new FlowLayout(FlowLayout.LEFT));
        //System.out.println("Size:" + panelGrafo.getSize());
        panelGrafo.add(graphComponent);

        btnAgregarDimension.setText("Agregar dimensión");
        btnAgregarDimension.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarDimensionActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jlNombre.setText("Nombre:");

        btnAgregarHecho.setText("Agregar hecho");
        btnAgregarHecho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarHechoActionPerformed(evt);
            }
        });

        menuGrafo.setText("Grafo");

        btnMenuMakeOnto.setText("Make onto");
        btnMenuMakeOnto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuMakeOntoActionPerformed(evt);
            }
        });
        menuGrafo.add(btnMenuMakeOnto);

        btnMenuMakeCovering.setText("Make covering");
        menuGrafo.add(btnMenuMakeCovering);
        menuGrafo.add(jSeparator1);

        jMenuItem1.setText("Cerrar");
        menuGrafo.add(jMenuItem1);

        jMenuBar1.add(menuGrafo);

        menuEdicion.setText("Edición");
        jMenuBar1.add(menuEdicion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAgregarDimension, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAgregarHecho)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jlNombre)
                        .addGap(2, 2, 2)
                        .addComponent(tfIngresadorNombre)))
                .addContainerGap())
            .addComponent(panelGrafo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelGrafo, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfIngresadorNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlNombre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarDimension)
                    .addComponent(btnEliminar)
                    .addComponent(btnAgregarHecho))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarDimensionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarDimensionActionPerformed
        // TODO add your handling code here:
        grafo.agregarNodo(tfIngresadorNombre.getText(), Grafo.ESTILO_DIMENSION, randX(), randY());
        tfIngresadorNombre.setText("");
    }//GEN-LAST:event_btnAgregarDimensionActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        grafo.eliminarNodosSeleccionados();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAgregarHechoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarHechoActionPerformed
        // TODO add your handling code here:
        grafo.agregarNodo(tfIngresadorNombre.getText(), Grafo.ESTILO_HECHO, randX(), randY());
        tfIngresadorNombre.setText("");
    }//GEN-LAST:event_btnAgregarHechoActionPerformed

    private void btnMenuMakeOntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuMakeOntoActionPerformed
        // TODO add your handling code here:
        VentanaEsquema ventana = new VentanaEsquema(grafo);
        ventana.setVisible(true);
    }//GEN-LAST:event_btnMenuMakeOntoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaEsquema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new VentanaEsquema().setVisible(true);
        });
    }

    /**
     * Inicializa los estilos para los nuevos nodos ingresados al grafo. (Forma,
     * colores, editabilidad, espaciado, ...). El estilo se guardará como
     * ESTILO_NODO
     */
    private void inicializarEstilo() {
        // Crear un nuevo objeto de estilos
        mxStylesheet hojaDeEstilos = grafo.getStylesheet();
        // Hash para los estilos, de la forma ("Propiedad"->Valor)
        // Las propiedades se encuentran en mxConstants.STYLE_*
        HashMap<String, Object> hashEstiloDimension = new HashMap<>();
        HashMap<String, Object> hashEstiloHecho;
        // Forma del nodo
        hashEstiloDimension.put(mxConstants.STYLE_SHAPE, mxConstants.SHAPE_ELLIPSE);
        // El nuevo nodo no será editable 
        // (No se podrá modificar el texto por la interfaz)
//        hashEstiloDimension.put(mxConstants.STYLE_EDITABLE, 0);
        // Tamaño de la fuente
        hashEstiloDimension.put(mxConstants.STYLE_FONTSIZE, 14);
        hashEstiloDimension.put(mxConstants.STYLE_GLASS, 1);
        // Quebrar la línea al no caber en el vértice
        hashEstiloDimension.put(mxConstants.STYLE_WHITE_SPACE, "wrap");
        // Estilo hechos igual al de dimensión, peo con diferentes coloresF
        hashEstiloHecho = new HashMap<>(hashEstiloDimension);
        // Color de relleno del nodo.
        hashEstiloDimension.put(mxConstants.STYLE_FILLCOLOR, "#E0ECF8");
        hashEstiloHecho.put(mxConstants.STYLE_FILLCOLOR, "#F8E0E0");
        // Color de la línea de contorno
        hashEstiloDimension.put(mxConstants.STYLE_STROKECOLOR, "#0B3861");
        hashEstiloHecho.put(mxConstants.STYLE_STROKECOLOR, "#3B0B0B");
        // Color de la fuente
        hashEstiloDimension.put(mxConstants.STYLE_FONTCOLOR, "#084B8A");
        hashEstiloHecho.put(mxConstants.STYLE_FONTCOLOR, "#B40404");
        //  

        hojaDeEstilos.putCellStyle(Grafo.ESTILO_DIMENSION, hashEstiloDimension);
        hojaDeEstilos.putCellStyle(Grafo.ESTILO_HECHO, hashEstiloHecho);
    }

    /**
     * Obtiene un valor aleatorio para insertar en X un nodo.
     *
     * @return Número aleatorio entre 0 y ancho - 150
     */
    public int randX() {
        return (int) (Math.random() * (panelGrafo.getSize().width - 150));
    }

    /**
     * Obtiene un valor aleatorio para insertar en Y un nodo.
     *
     * @return Número aleatorio entre 0 y alto - 150
     */
    public int randY() {
        return (int) (Math.random() * (panelGrafo.getSize().height - 150));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarDimension;
    private javax.swing.JButton btnAgregarHecho;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JMenuItem btnMenuMakeCovering;
    private javax.swing.JMenuItem btnMenuMakeOnto;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel jlNombre;
    private javax.swing.JMenu menuEdicion;
    private javax.swing.JMenu menuGrafo;
    private javax.swing.JPanel panelGrafo;
    private javax.swing.JTextField tfIngresadorNombre;
    // End of variables declaration//GEN-END:variables

}
