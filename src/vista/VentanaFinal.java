/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import com.mxgraph.model.mxCell;
import com.mxgraph.swing.mxGraphComponent;
import controlador.Grafo;
import controlador.GrafoEsquema;
import controlador.GrafoInstancia;
import controlador.MouseEventInstancia;
import exception.NoEncontrado;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import modelo.Esquema;
import modelo.Inclusion;
import modelo.Inclusion1;
import modelo.Instancia;
import modelo.NodoInstancia;
import modelo.TipoCategoria;
import modelo.TipoDeDimension;

/**
 *
 * @author Camilo Sampedro
 */
public class VentanaFinal extends javax.swing.JFrame {

    /**
     * Objeto con la información del grafo.
     */
    protected Grafo grafo;

    /**
     * Componente gráfico del grafo. Aquí se hacen las actualizaciones gráficas
     * y se puede obtener información gráfica del grafo y de los nodos.
     */
    private mxGraphComponent graphComponent;

    /**
     * Última celda (Vértice o lado) a la que se le hizo clic. Usado para
     * verificar qué celda eliminar, sabiendo que fue la última a la que se le
     * hizo clic. Si no hay ninguna celda seleccionada, este valor será nulo y
     * ninguna será eliminada.
     */
    private mxCell celda;

//    private final static Object[] opciones = {"Parcial", "Total"};
    private TipoDeDimension tipoDeDimension;

    private Instancia instancia;

    /**
     * Crea una nueva ventana de grafo vacío.
     */
    private VentanaFinal() {
        grafo = new GrafoEsquema();
        instancia = new Instancia();
        initComponents();
        graphComponent.getGraphControl().addMouseListener(new MouseEventInstancia(grafo));
    }

    /**
     * Ventana con un grafo resultado.
     *
     * @param grafo Grafo a imprimir.
     */
    private VentanaFinal(Grafo grafo) {
        this.grafo = grafo;
        instancia = new Instancia();
        initComponents();
        graphComponent.getGraphControl().addMouseListener(new MouseEventInstancia(grafo));
    }

    public VentanaFinal(TipoDeDimension tipoDeDimensionActual, Instancia algoritmosAplicados) {
        grafo = new GrafoInstancia();
        this.tipoDeDimension = tipoDeDimensionActual;
        instancia = algoritmosAplicados;
        initComponents();
        graphComponent.getGraphControl().addMouseListener(new MouseEventInstancia(grafo));
        agregarTodo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        panelGrafo = new javax.swing.JPanel();
        btnFinalizar = new javax.swing.JButton();

        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Grafize - Resultado");

        panelGrafo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelGrafo.setLayout(new java.awt.GridLayout(1, 0));
        graphComponent = new mxGraphComponent(grafo);
        //graphComponent.setPreferredSize(new Dimension(500,500));
        //panelGrafo.setLayout(new FlowLayout(FlowLayout.LEFT));
        //System.out.println("Size:" + panelGrafo.getSize());
        panelGrafo.add(graphComponent);

        btnFinalizar.setText("Finalizar");
        btnFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelGrafo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnFinalizar, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelGrafo, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFinalizar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnFinalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaFinal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new VentanaFinal().setVisible(true);
        });
    }

    /**
     * Obtiene un valor aleatorio para insertar en X un nodo.
     *
     * @return Número aleatorio entre 0 y ancho - 150
     */
    public int randX() {
        return (int) (Math.random() * (panelGrafo.getSize().width - 150));
    }

    /**
     * Obtiene un valor aleatorio para insertar en Y un nodo.
     *
     * @return Número aleatorio entre 0 y alto - 150
     */
    public int randY() {
        return (int) (Math.random() * (panelGrafo.getSize().height - 150));
    }

    String[] construirStrings() {
        ArrayList<String> strings = new ArrayList();
        tipoDeDimension.getAll().stream().forEach((tipoCategoria) -> {
            instancia.InsertarCategoria(tipoCategoria.getNombreCategoria());
            strings.add(tipoCategoria.getNombreCategoria());
        });
        return strings.toArray(new String[strings.size()]);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFinalizar;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelGrafo;
    // End of variables declaration//GEN-END:variables

    private String getNombre(String string) {
        String[] strings = string.split("strong>");
        return strings[1].replace("</", "");
    }

    private String getTipo(String string) {
        String[] strings = string.split("em>");
        return strings[1].replace("</", "");
    }

    private void agregarTodo() {
        for (TipoCategoria tipo : instancia.getVector()) {
            for (NodoInstancia nodoInstancia : tipo.getInstancias()) {
                grafo.agregarNodo("<p><strong>" + nodoInstancia.getNombre() + "</strong></p>"
                        + "<p><em>" + nodoInstancia.getNombreCategoria() + "</em></p>", Grafo.CATEGORIA, randX(), randY());
                for (Inclusion1 inclusion : nodoInstancia.getHijos()) {
                    grafo.agregarNodo("<p><strong>" + inclusion.getNodo().getNombre() + "</strong></p>"
                            + "<p><em>" + inclusion.getNodo().getNombreCategoria() + "</em></p>", Grafo.CATEGORIA, randX(), randY());
                    try {
                        grafo.enlazarNodos("<p><strong>" + nodoInstancia.getNombre() + "</strong></p>"
                                + "<p><em>" + nodoInstancia.getNombreCategoria() + "</em></p>",
                                "<p><strong>" + inclusion.getNodo().getNombre() + "</strong></p>"
                                + "<p><em>" + inclusion.getNodo().getNombreCategoria() + "</em></p>", inclusion.getGradoDeInclusion());
                    } catch (NoEncontrado ex) {
                        Logger.getLogger(VentanaFinal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }
}
